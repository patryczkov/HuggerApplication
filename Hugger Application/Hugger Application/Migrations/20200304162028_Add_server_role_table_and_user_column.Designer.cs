// <auto-generated />
using Hugger_Web_Application.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Hugger_Application.Migrations
{
    [DbContext(typeof(UserContext))]
    [Migration("20200304162028_Add_server_role_table_and_user_column")]
    partial class Add_server_role_table_and_user_column
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Hugger_Application.Data.Entities.ServerRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("RoleName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ServerRoles");
                });

            modelBuilder.Entity("Hugger_Web_Application.Models.Characteristic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Characteristics");
                });

            modelBuilder.Entity("Hugger_Web_Application.Models.Hug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("UserIDReceiver")
                        .HasColumnType("integer");

                    b.Property<int>("UserIDSender")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserIDSender");

                    b.ToTable("Hugs");
                });

            modelBuilder.Entity("Hugger_Web_Application.Models.Localization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("GPS")
                        .HasColumnType("text");

                    b.Property<string>("LocalizationName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Localizations");
                });

            modelBuilder.Entity("Hugger_Web_Application.Models.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("MatchDate")
                        .HasColumnType("text");

                    b.Property<int>("UserIDReceiver")
                        .HasColumnType("integer");

                    b.Property<int>("UserIDSender")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserIDSender");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("Hugger_Web_Application.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("MatchId")
                        .HasColumnType("integer");

                    b.Property<string>("TimeOfSend")
                        .HasColumnType("text");

                    b.Property<bool>("WasRead")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Hugger_Web_Application.Models.Preference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Preferences");
                });

            modelBuilder.Entity("Hugger_Web_Application.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BirthYear")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FolderId")
                        .HasColumnType("text");

                    b.Property<string>("FolderPath")
                        .HasColumnType("text");

                    b.Property<int>("LastWatchedUserId")
                        .HasColumnType("integer");

                    b.Property<int>("LocalizationId")
                        .HasColumnType("integer");

                    b.Property<string>("Login")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<int>("ServerRoleId")
                        .HasColumnType("integer");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LocalizationId");

                    b.HasIndex("ServerRoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Hugger_Web_Application.Models.UserCharacteristic", b =>
                {
                    b.Property<int>("CharacteristicId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("CharacteristicId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Users_Characteristics");
                });

            modelBuilder.Entity("Hugger_Web_Application.Models.UserPreference", b =>
                {
                    b.Property<int>("PreferenceId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("PreferenceId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Users_Preferences");
                });

            modelBuilder.Entity("Hugger_Web_Application.Models.Hug", b =>
                {
                    b.HasOne("Hugger_Web_Application.Models.User", "User")
                        .WithMany("Hugs")
                        .HasForeignKey("UserIDSender")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hugger_Web_Application.Models.Match", b =>
                {
                    b.HasOne("Hugger_Web_Application.Models.User", "User")
                        .WithMany("Matches")
                        .HasForeignKey("UserIDSender")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hugger_Web_Application.Models.Message", b =>
                {
                    b.HasOne("Hugger_Web_Application.Models.Match", "Match")
                        .WithMany("Messages")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hugger_Web_Application.Models.User", b =>
                {
                    b.HasOne("Hugger_Web_Application.Models.Localization", "Localization")
                        .WithMany()
                        .HasForeignKey("LocalizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hugger_Application.Data.Entities.ServerRole", "ServerRole")
                        .WithMany()
                        .HasForeignKey("ServerRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hugger_Web_Application.Models.UserCharacteristic", b =>
                {
                    b.HasOne("Hugger_Web_Application.Models.Characteristic", "Characteristic")
                        .WithMany("UserCharacteristics")
                        .HasForeignKey("CharacteristicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hugger_Web_Application.Models.User", "User")
                        .WithMany("UserCharacteristics")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hugger_Web_Application.Models.UserPreference", b =>
                {
                    b.HasOne("Hugger_Web_Application.Models.Preference", "Preference")
                        .WithMany("UsersPreferences")
                        .HasForeignKey("PreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hugger_Web_Application.Models.User", "User")
                        .WithMany("UsersPreferences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
